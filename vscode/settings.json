{
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.acceptSuggestionOnEnter": "off",
    "editor.renderLineHighlight": "all",
    "editor.scrollBeyondLastLine": false,
    "editor.wordWrap": "wordWrapColumn",
    "explorer.autoReveal": false,
    "files.associations": {
        "*.vimrc.local": "viml",
        "*.psh": "shellscript"
    },
    // change to "\n" for Unix workspaces on Windows
    "files.eol": "auto",
    "files.exclude": {
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },
    "gitlens.statusBar.enabled": false,
    "gitlens.statusBar.reduceFlicker": true,
    "[go]": {
        "editor.wordWrap": "bounded",
        "editor.wordWrapColumn": 120
    },
    "[go.mod]": {
        "editor.wordWrap": "bounded",
        "editor.wordWrapColumn": 120,
        // same as [go] defaults
        "editor.insertSpaces": false,
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        }
    },
    // ignored with the language server on
    "go.autocompleteUnimportedPackages": true,
    // ignored with the language server on
    "go.formatTool": "goimports",
    "go.lintFlags": [
        "-E", "exportloopref,lll,revive,whitespace",
        // optional
        "-E", "goimports",
        // optional; use for development but not in CI
        "-E", "stylecheck",
        // no count limits
        "--max-issues-per-linter", "0", "--max-same-issues", "0",
        // optionally limit to current work
        //"--new-from-rev", "HEAD~1",
        // use only in IDEs, not CI
        "--fast"
    ],
    // if set to "package", errors in one package disappear when you save in
    // another
    "go.lintOnSave": "workspace",
    "go.lintTool": "golangci-lint",
    "go.toolsManagement.autoUpdate": true,
    // technically still alpha but does some things (e.g. completion) better IMO
    "go.useLanguageServer": true,
    // not needed with golangci-lint (ignored with the language server on?)
    "go.vetOnSave": "off",
    "gopls": {
        "completeUnimported": true
    },
    "highlight-bad-chars.additionalUnicodeChars": [
        "\u0009"  // tab
    ],
    "java.checkstyle.configuration": "/google_checks.xml",
    "[markdown]": {
        "editor.wordWrap": "wordWrapColumn"
    },
    "markdown.extension.toc.updateOnSave": false,
    "markdownlint.config": {
        "MD007": {
            "indent": 4
        }
    },
    "merge-conflict.autoNavigateNextConflict.enabled": true,
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.linting.flake8Path": "/Users/zephyr/bin/flake8",
    "python.linting.pylintEnabled": false,
    "python.pythonPath": "/Users/zephyr/.pyenv/versions/3.7.4/bin/python",
    "redhat.telemetry.enabled": false,
    "search.collapseResults": "alwaysExpand",
    "shellcheck.exclude": [
        "SC1117"
    ],
    "shellcheck.run": "onSave",
    "sync.autoDownload": true,
    "sync.autoUpload": true,
    "sync.gist": "2c8bd11436a82986ac40c50ac35fb63f",
    "sync.removeExtensions": false,
    "telemetry.telemetryLevel": "off",
    "window.newWindowDimensions": "inherit",
    "window.restoreWindows": "all",
    "window.title": "${rootName}${separator}${activeEditorShort}",
    // include so it stays in order when zooming in/out; otherwise it will be
    // added at the bottom
    "window.zoomLevel": 0,
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    "workbench.list.horizontalScrolling": true,
    "workbench.settings.editor": "json",
    "workbench.settings.useSplitJSON": true
}