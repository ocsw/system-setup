# shellcheck shell=bash

#
# This is a pseudo shell script.
#
# DON'T RUN THIS LIKE AN ACTUAL SCRIPT!
# SELECT THE RELEVANT BITS AND RUN THEM FROM THE COMMAND LINE
#

#
# Mac
#
umask 022
# For GKE, gcloud's kubectl is recommended, but brew's is needed to install
# the other brew packages
#gcloud components install kubectl
brew update
brew install kubernetes-cli
brew install krew
brew install derailed/k9s/k9s
brew install fzf
brew install kubectx
brew tap johanhaleby/kubetail && brew install johanhaleby/kubetail/kubetail
brew install stern
brew install kube-ps1
brew install minikube
brew install kind
brew install k3d
brew tap robscott/tap && brew install robscott/tap/kube-capacity
brew install argoproj/tap/kubectl-argo-rollouts
brew install kustomize
brew install kubeconform
brew install conftest
brew install kubent
brew install kubebuilder
brew install helm
brew install helm-docs
brew install fluxcd/tap/flux
brew install istioctl
brew install opa
brew install styrainc/packages/regal
#brew install velero
umask 077
#
# Download Velero from:
# https://github.com/vmware-tanzu/velero/releases/tag/v1.11.1
# (but update)
# (or install with brew??)
(
    set -e
    ARCH=$(uname -m)
    mkdir -p ~/bin
    tar xvzf "velero-v1.11.1-darwin-${ARCH}.tar.gz"
    mv "velero-v1.11.1-darwin-${ARCH}/velero" ~/bin/
    chmod 755 ~/bin/velero
    rm -r "velero-v1.11.1-darwin-${ARCH}.tar.gz" \
        "velero-v1.11.1-darwin-${ARCH}/"
)
#
# Install https://k8slens.dev/ or https://github.com/MuhammedKalkan/OpenLens
# Install https://github.com/rikatz/kubepug
#
go install github.com/plexsystems/konstraint@latest
#
# See https://github.com/kvaps/kubectl-node-shell
kubectl krew install node-shell
#
# Run these, then add them to your shell startup; see
# https://github.com/ocsw/dotfiles/blob/main/dot.bash_profile and
# https://github.com/ocsw/dotfiles/blob/main/dot.bash_profile.d/kubernetes.post.sh
! [[ $PATH =~ (^|:)${HOME}/bin(:|$) ]] && export PATH="${HOME}/bin:${PATH}"
export PATH="${PATH}:${HOME}/.krew/bin"


#
# Docker image for use with e.g. kubectl debug; consider adding it to your
# shell settings
# (See https://github.com/nicolaka/netshoot; see also
# https://github.com/ocsw/dotfiles/blob/main/dot.bashrc.d/kubernetes.post.sh)
#
# shellcheck disable=SC2034
KUBE_DEBUG_IMAGE="nicolaka/netshoot"


#
# Back up config; see
# https://github.com/ocsw/dotfiles/blob/main/dot.bashrc.d/to_back_up.post.sh
#
mkdir -p ~/.kube
touch ~/.kube/config
chmod 600 ~/.kube/config
ln_tbu ~/.kube/config

#
# See also
# https://github.com/ocsw/dotfiles/blob/main/dot.bashrc.d/updates.post.sh
#


#
# From the root of each repo containing Rego files (add options as necessary;
# see
# https://github.com/ocsw/dotfiles/blob/main/dot.bashrc.d/vscode-setting.post.sh):
#
vscode-setting -j "highlight-bad-chars.additionalUnicodeChars" '[]'


#
# GKE-specific setup
#
umask 022
echo "y" | gcloud components install gke-gcloud-auth-plugin
gcloud components update
# Install KCC (?)
#    https://cloud.google.com/config-connector/docs/how-to/import-export/overview#installing-config-connector
umask 077
#
mkdir -p ~/bin
# In theory, you're supposed to add $(brew --prefix)/share/google-cloud-sdk/bin
# to your path, but most of the things in there are already symlinked into
# $(brew --prefix)/bin, so we can just handle this on its own.  (However,
# gcloud can find this without it being in the PATH, so the symlink is only
# necessary for calling the plugin directly.)
ln -s "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/gke-gcloud-auth-plugin" ~/bin/
#
# Run these, then add them to your shell startup; see
# https://github.com/ocsw/dotfiles/blob/main/dot.bash_profile and
# https://github.com/ocsw/dotfiles/blob/main/dot.bash_profile.d/kubernetes.post.sh
# (The env var is only actually necessary for old clusters (pre-1.26) but it
# can't hurt; see
# https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke)
! [[ $PATH =~ (^|:)${HOME}/bin(:|$) ]] && export PATH="${HOME}/bin:${PATH}"
export USE_GKE_GCLOUD_AUTH_PLUGIN=True
#
gke-up  # see below

#
# GKE update
#
gke_up () {  # can use gke-up in bash
    # Get credentials for all clusters
    # (Probably want to remove the production filter)
    # Note: Final sh is $0, then xargs adds $1 and $2
    # shellcheck disable=SC2016
    gcloud container clusters list \
            --project=PROJECT_NAME \
            --filter="resourceLabels[env]=production" \
            --format="value[delimiter=' '](name,zone)" |
        xargs -n 2 sh -c \
            'gcloud container clusters get-credentials $1 --region=$2 --project=PROJECT_NAME' \
            sh
}

#
# GKE lists
#
# Can actually just use kubectx in a pipeline instead of this
gke_contexts () {  # can use gke-contexts in bash
    # Get all locally-configured contexts
    kubectl config get-contexts | tail -n +2 | awk '{print $2}' | sort
}
gke_clusters () {  # can use gke-clusters in bash
    # Get all clusters
    # (Probably want to remove the production filter)
    gcloud container clusters list --project=PROJECT_NAME \
        --filter="resourceLabels[env]=production" --format="value(name)" | sort
}
