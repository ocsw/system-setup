# shellcheck shell=sh

#
# This is a pseudo shell script.
#
# DON'T RUN THIS LIKE AN ACTUAL SCRIPT!
# SELECT THE RELEVANT BITS AND RUN THEM FROM THE COMMAND LINE
#


#
# GitHub write access requires an SSH key (typically), and Git commit signing
# requires an SSH key (new way) or a GPG key (old way).  They both require
# preliminary steps that are in account-setup.psh.
#
# The directions below set up keys and configs for each of one or more GitHub
# accounts, then overall defaults.  Technically, it's possible to leave out
# the defaults, but that requires that every repo to which you need to write or
# in which you need to sign commits must have the proper config applied in its
# .ssh/config or via something like an includeIf setting in ~/.gitconfig.  That
# may be a particular problem with repos that do things like import Python
# packages via SSH paths.  But in most circumstances there is a clear default
# account to use, such as a main personal account or a work account.
#
# Which keys and configs to apply to any given repo (other than the defaults)
# is set up below to depend on the repo's remote origin URL.  It's also
# possible to have it depend on the repo's filesystem path, so that you can
# e.g. make a directory under which you put all of the repos for a particular
# account.  But if you do that, you run the risk of accidentally putting a repo
# in the directory which doesn't go with the selected account, and using the
# account's signing key and config, but the default access key.  Basing the
# config on the repos' URLs means that the account's signing key and config
# will be used if and only if the account's access key is also used (although
# you can still manually change that in a repo's .git/config if necessary).
#


########
# prep #
########

# Install git and diff-so-fancy
# If __git_ps1 isn't included in the git installation, install it
# Optionally, install gh and lazygit

# Do the initial SSH setup described in account-setup.psh

# If using GPG for signing, install it and do the initial setup described in
# account-setup.psh


########################
# GitHub - per account #
########################

ACCOUNT_NAME=ocsw

#
# authentication
#
# Remember to set a passphrase and record it securely!
ssh-keygen -a 100 -t ed25519 -f "${HOME}/.ssh/github_${ACCOUNT_NAME}_ed25519"
cat >> ~/.ssh/config <<EOF
Host github-${ACCOUNT_NAME}
    Hostname github.com
    IdentityFile ~/.ssh/github_${ACCOUNT_NAME}_ed25519
EOF
cat "${HOME}/.ssh/github_${ACCOUNT_NAME}_ed25519.pub"
# Add the public key to the GitHub account

#
# signing - GPG way (old)
#
# Use RSA/RSA 4096, no expiration, the same name and email as on the account,
# and comment 'HOSTNAME -> GitHub (ACCOUNT_NAME)'
# Remember to set a passphrase and record it securely!
###gpg --full-generate-key
# Not really necessary; it will be printed when the key is generated
#gpg --list-secret-keys --keyid-format LONG  # copy the key ID
###gpg --armor --export KEY_ID
# Add the public key to the GitHub account

#
# signing - SSH way (new)
#
# Remember to set a passphrase and record it securely!
ssh-keygen -a 100 -t ed25519 -f \
    "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519"
cat "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519.pub"
# Add the public key to the GitHub account


####################
# GitHub - default #
####################

DEFAULT_ACCOUNT_NAME=ocsw

cat >> ~/.ssh/config <<EOF
Host github.com
    IdentityFile ~/.ssh/github_${DEFAULT_ACCOUNT_NAME}_ed25519
EOF


##############################
# Git - general and defaults #
##############################

# Run git-config.sh

DEFAULT_ACCOUNT_NAME=ocsw

# These should match the account
git config --global user.name 'Danielle Zephyr Malament'
git config --global user.email danielle.malament@gmail.com

# GPG signing (old)
###git config --global user.signingkey KEY_ID

# SSH signing (new)
git config --global user.signingkey \
    "${HOME}/.ssh/github_${DEFAULT_ACCOUNT_NAME}_signing_ed25519.pub"

# Optionally, run git-check.sh


#####################
# Git - per account #
#####################

ACCOUNT_NAME=ocsw

ACCOUNT_CONFIG="${HOME}/.gitconfig_${ACCOUNT_NAME}"

# These should match the account
git config -f "${ACCOUNT_CONFIG}" user.name 'Danielle Zephyr Malament'
git config -f "${ACCOUNT_CONFIG}" user.email danielle.malament@gmail.com

# GPG signing (old)
###git config -f "${ACCOUNT_CONFIG}" user.signingkey KEY_ID

# SSH signing (new)
git config -f "${ACCOUNT_CONFIG}" user.signingkey \
    "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519.pub"



(
    cd && ln_tbu ".gitconfig_${ACCOUNT_NAME}"
)

# mostly for Go
git config --global url.git@ghe.spotify.net:.insteadOf https://ghe.spotify.net/
git config --global 'includeIf.hasconfig:remote.*.url:https://example.com/**.path' \
    "${ACCOUNT_CONFIG}"
# mostly for Go
git config --global 'includeIf.gitdir:**/ghe.spotify.net/**.path' \
    "${ACCOUNT_CONFIG}"

# Assuming all your work repositories are in a single github org like `github.com/WORK_ORG`
# Conditionally include configs to override settings in those repositories
[includeIf "hasconfig:remote.*.url:git@github.com:WORK_ORG/**"]
  path = .gitconfig-work

# Rewrite `github.com:WORK_ORG` to `github.com-work:WORK_ORG` to get the right SSH key
[url "git@github.com-work:WORK_ORG/"]
	insteadOf = git@github.com:WORK_ORG/
--add
GOPRIVATE=github.com/org/repo
GOPRIVATE=github.com/org/*

# Optionally, run git-check.sh

cleanup
# consolidate and order the config file from most to least specific
ssh-add


# Ssh finalize
# Point to add stuff, Mac stuff
# Prep, point to mac stuff
# GPG point to mac stuff
# Final steps
# Alias/script for instead of in go repos
# */** for ssh?
# There is a ###circular dependency here, so you probably won't be able to do this yet, but just in case:
# Otherwise, blah will do it when you get to that
# how to use
ocsw to orgs/goprivate?

can't chain insteads
if remote only works on what's in the file, no instead
ssh read for any
if sp branch -> no



ACCOUNT_ORGS="
"
# Handle private repos in Go
for i in $ACCOUNT_ORGS; do  # no quotes
    if [[ ! $GOPRIVATE =~ github.com:${i}/\* ]]; then
        GOPRIVATE+=",github.com:${i}/*"
    fi
done
GOPRIVATE="${GOPRIVATE##,}"
export GOPRIVATE


mkdir -p ~/.ssh
chmod 700 ~/.ssh
touch ~/.ssh/config
chmod 600 ~/.ssh/config

# Note: if you use the new SSH signing method, you will need to re-add the
# signing key to the ssh-agent any time you reboot.  To do that, you can run
# the ssh-add command below, or 'ssh-add --apple-load-keychain' (which will
# add all SSH keys).

git config --global gpg.format ssh  # if using an SSH key
git config --global commit.gpgsign true
git config --global tag.forcesignannotated true

cat >> ~/.ssh/config <<EOF
Host *
    AddKeysToAgent yes
    IdentitiesOnly yes
    UseKeychain yes
EOF

# Once your SSH config is set up, the sections should be consolidated and
# ordered from most to least specific

# For each key, run:
ssh-add --apple-use-keychain ~/.ssh/KEY_FILE

# These are particularly important for running go get on private repos
# (See also the Go section, below)
ACCOUNT_ORGS="
"
for i in $ACCOUNT_ORGS; do  # no quotes
    git config --global \
        "url.git@github.com:${i}/.insteadOf" \
        "https://github.com/${i}/"
done

# Alternatively, you can set a substitution for all of GitHub, but if you have
# multiple accounts that use different SSH targets, as in
# https://github.com/ocsw/system-setup/blob/main/unix-common/git.psh, that
# could break things
#git config --global url.git@github.com:.insteadOf https://github.com/
