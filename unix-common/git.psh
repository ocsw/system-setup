# shellcheck shell=bash

#
# This is a pseudo shell script.
#
# DON'T RUN THIS LIKE AN ACTUAL SCRIPT!
# SELECT THE RELEVANT BITS AND RUN THEM FROM THE COMMAND LINE
#


#
# GitHub write access requires an SSH key (typically), and Git commit signing
# requires an SSH key (new way) or a GPG key (old way).  They both require
# preliminary steps that are in account-setup.psh.
#
# The directions below set up keys and configs for each of one or more GitHub
# accounts, then overall defaults.  Technically, it's possible to leave out the
# defaults, but that requires that every repo to which you need to write, in
# which you need to sign commits, or which is private, must have the proper
# config applied.  (Note that that includes things like importing private
# Python or Go packages, not just explicit git commands.)  It is possible to
# arrange such a config fairly easily if all of the relevant repos are in
# specific GitHub orgs/accounts.  But even so, in most circumstances there is a
# clear default account to use, such as a main personal account or a work
# account.
#


########
# Prep #
########

# Install git and diff-so-fancy
# If __git_ps1 isn't included in the git installation, install it
# Optionally, install gh and lazygit

# Do the initial SSH setup described in account-setup.psh

# If using GPG for signing, install it and do the initial setup described in
# account-setup.psh


########################
# GitHub - Per Account #
########################

ACCOUNT_NAME=ocsw

#
# authentication
#
# Remember to set a passphrase and record it securely!
ssh-keygen -a 100 -t ed25519 -f "${HOME}/.ssh/github_${ACCOUNT_NAME}_ed25519"
cat >> ~/.ssh/config <<EOF
Host github-${ACCOUNT_NAME}
    Hostname github.com
    IdentityFile ~/.ssh/github_${ACCOUNT_NAME}_ed25519
EOF
cat "${HOME}/.ssh/github_${ACCOUNT_NAME}_ed25519.pub"
# Add the public key to the GitHub account

#
# signing - GPG way (old)
#
# Use RSA/RSA 4096, no expiration, the same name and email as on the account,
# and comment 'HOSTNAME -> GitHub (ACCOUNT_NAME)'
# Remember to set a passphrase and record it securely!
###gpg --full-generate-key
# Not really necessary; it will be printed when the key is generated
#gpg --list-secret-keys --keyid-format LONG  # copy the key ID
###gpg --armor --export KEY_ID
# Add the public key to the GitHub account

#
# signing - SSH way (new)
#
# Remember to set a passphrase and record it securely!
ssh-keygen -a 100 -t ed25519 -f \
    "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519"
cat "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519.pub"
# Add the public key to the GitHub account


####################
# GitHub - Default #
####################

DEFAULT_ACCOUNT_NAME=ocsw

cat >> ~/.ssh/config <<EOF
Host github.com
    IdentityFile ~/.ssh/github_${DEFAULT_ACCOUNT_NAME}_ed25519
EOF


##############################
# Git - General and Defaults #
##############################

# Run git-config.sh

# These settings are particularly relevant to commit and tag signing:
git config --global gpg.format ssh  # if using an SSH key
git config --global commit.gpgsign true
git config --global tag.forcesignannotated true

DEFAULT_ACCOUNT_NAME=ocsw

# These should match the account
git config --global user.name 'Danielle Zephyr Malament'
git config --global user.email danielle.malament@gmail.com

# GPG signing (old)
###git config --global user.signingkey KEY_ID

# SSH signing (new)
git config --global user.signingkey \
    "${HOME}/.ssh/github_${DEFAULT_ACCOUNT_NAME}_signing_ed25519.pub"


#####################
# Git - Per Account #
#####################

ACCOUNT_NAME=ocsw

ACCOUNT_CONFIG="${HOME}/.gitconfig_${ACCOUNT_NAME}"

# These should match the account
git config -f "${ACCOUNT_CONFIG}" user.name 'Danielle Zephyr Malament'
git config -f "${ACCOUNT_CONFIG}" user.email danielle.malament@gmail.com

# GPG signing (old)
###git config -f "${ACCOUNT_CONFIG}" user.signingkey KEY_ID

# SSH signing (new)
git config -f "${ACCOUNT_CONFIG}" user.signingkey \
    "${HOME}/.ssh/github_${ACCOUNT_NAME}_signing_ed25519.pub"

(
    # Might have to do this later, after setting up dotfiles
    # (Alternatively, the dotfiles repo's INSTALL.sh will do this for all
    # files in $HOME matching '.gitconfig_*')
    cd && ln_tbu ".gitconfig_${ACCOUNT_NAME}"
)


#
# Use the proper keys and config for repos associated with this account, by org
#
# The first insteadOf means you don't have to change URLs to include
# github-ACCOUNT_NAME when cloning.  This is particularly useful because if you
# change the URL, programs that look for it will get confused.  For example,
# VSCode won't be able to do 'Open File on Remote'.
#
# The HTTPS insteadOf is particularly important for running 'go get' on private
# repos, since Go defaults to using HTTPS.  That use case is also one reason
# why this insteadOf must be in the global config; 'go get' runs its git
# commands from a directory in $GOROOT, so it doesn't see a repo's local
# .git/config when run from within it.  (See also go.psh.)
#
# The insteadOfs make git use SSH with the correct access key.  Putting them in
# the global config allows them to apply not only when cloning the repos and
# when performing operations on those clones, but also when doing things like
# including private Python or Go modules from anywhere else.
#
# The includeIf makes git use the proper config, including the signing key.  It
# applies if any remote for a repo includes the specified string; there is
# currently no way to limit it to a particular remote name.
#
# (It's possible to have the config depend on the repo's filesystem path
# instead, so that you can e.g. make a directory under which you put all of the
# repos for a particular account.  But if you do that, you run the risk of
# accidentally putting a repo in the directory which doesn't go with the
# selected account, and using the account's signing key and config, but the
# default access key.  Basing the config on the repos' URLs means that the
# account's signing key and config will be used if and only if the account's
# access key is also used (although you can still manually change that in a
# repo's .git/config if necessary).)
#
# The includeIf is (probably?) only relevant when working in a local copy of a
# relevant repo, but having it at the global level means that it doesn't need
# to be applied to every single such repo individually.
#
# For the default account, the first insteadOf and the includeIf can
# technically be skipped, but it's not a bad idea to include them as a fallback
# in case you ever change the default.  The second insteadOf is necessary
# regardless - unless you put a blanket one for all of github.com into your
# config file.  See below for more information about that option.
#
# Add orgs as necessary
ACCOUNT_ORGS="
    ${ACCOUNT_NAME}
"
for i in $ACCOUNT_ORGS; do  # no quotes
    git config --global --add \
        "url.git@github-${ACCOUNT_NAME}:${i}/.insteadOf" \
        "git@github.com:${i}/"
    git config --global --add \
        "url.git@github-${ACCOUNT_NAME}:${i}/.insteadOf" \
        "https://github.com/${i}/"
    git config --global --add \
        "includeIf.hasconfig:remote.*.url:git@github.com:${i}/**" \
        "${ACCOUNT_CONFIG}"
done
#
# Note: insteadOf can't be chained; it only applies to what's actually in a
# repo's .git/config or on the command line.  Likewise,
# includeIf.hasconfig:remote.*.url won't trigger on the result of an insteadOf,
# only what's already present.
#
# The trailing slashes (/) in the insteadOfs ensure that they don't apply to a
# different org with a longer name (e.g. /organization for /org).  These
# matches are straightforward literal prefixes.


#
# Use the proper keys and config for individual repos associated with this
# account
#
# There are two ways to handle one-off repos that don't lend themselves to
# org-level configuration.  One is to do the same global config as for orgs,
# but with the full repo path.  That may be necessary for private Python or Go
# modules, for example.  To illustrate:
#
# Add repos as necessary
ACCOUNT_REPOS="
    ORG_NAME/REPO_NAME
"
for i in $ACCOUNT_REPOS; do  # no quotes
    git config --global --add \
        "url.git@github-${ACCOUNT_NAME}:${i}.insteadOf" \
        "git@github.com:${i}"
    git config --global --add \
        "url.git@github-${ACCOUNT_NAME}:${i}.insteadOf" \
        "https://github.com/${i}"
    git config --global --add \
        "includeIf.hasconfig:remote.*.url:git@github.com:${i}.git" \
        "${ACCOUNT_CONFIG}"
done
#
# Note: In different circumstances, repo names may or may not have .git
# appended to them.  By leaving off .git in the insteadOfs, we cover those
# cases at the cost of potentially matching longer names (e.g. /repository for
# /repo).
#
# (Explanation: Go uses a direct URL for github.com, as hardcoded in vcsPaths
# in https://github.com/golang/go/blob/master/src/cmd/go/internal/vcs/vcs.go.
# This does not include the .git suffix.  However, for other sites, it makes a
# request ending in ?go-get=1 to find out where to clone from and how, and the
# server may return a URL including the .git.  (See
# https://go.dev/ref/mod#vcs-find for more information.)  This applies, for
# instance, to GitHub Enterprise installations.  In those cases, it's not a bad
# idea to include the .git suffix in all of the URLs in the repo-specific
# insteadOfs.)
#
#
# The other option applies mainly to working with local copies of repos that
# need specific keys and config.  Some of the above settings can be added in
# the repo's .git/config file, instead of globally.  The catch is that (as
# mentioned above) 'go get' won't pick up this config, so there may be no way
# around adding a global HTTPS insteadOf, if using Go.  In any case, to add the
# settings locally, change to the root directory of the repo, and run:
git config --add \
    "url.git@github-${ACCOUNT_NAME}:ORG_NAME/REPO_NAME.insteadOf" \
    "git@github.com:ORG_NAME/REPO_NAME"
git config --add \
    "url.git@github-${ACCOUNT_NAME}:ORG_NAME/REPO_NAME.insteadOf" \
    "https://github.com/ORG_NAME/REPO_NAME"
git config --add \
    include.path \
    "${ACCOUNT_CONFIG}"
#
# (The same notes about .git suffixes apply as above.)


# With this setting, it's not necessary to have insteadOf settings for HTTPS
# for the default account's orgs.  It's probably safe to do this; anything more
# specific will be longer, and git goes with the longest match.  (And anything
# that can be read with HTTPS can be read using an SSH key.)  However,
# preliminary testing suggests that SSH is significantly slower than HTTPS, so
# I wouldn't set this so broadly (and globally) unless there was a good reason.
###git config --global --add \
###    "url.git@github.com:.insteadOf" \
###    "https://github.com/"


###############
# Final Steps #
###############

# Optionally, run git-check.sh

# Finish the SSH setup as described in account-setup.psh

# Note: If you use the new SSH signing method, you will need to re-add the
# signing keys to the ssh-agent any time you reboot.  To do that on macOS, you
# can run 'ssh-add --apple-use-keychain ~/.ssh/KEY_FILE  # absolute path', or
# 'ssh-add --apple-load-keychain' (which will add all of your SSH keys).
# Alternatively, to automatically load all of your keys on login, run this from
# the directory these directions are in:
cp ../macos/ssh-add-all.plist ~/Library/LaunchAgents/

# (Explanation: With the AddKeysToAgent setting on, regular SSH keys will be
# added when they are used.  SSH signing keys are never used in the usual way
# however, so they aren't automatically added regardless of settings.)
